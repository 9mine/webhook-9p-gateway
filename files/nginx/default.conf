init_by_lua_block {
  require "resty.core"
  collectgarbage("collect")  -- just to collect any garbage
  cjson = require('cjson.safe')
  uuid = require 'resty.jit-uuid'
  uuid.seed()
}

#env 9P_HOST;
#env 9P_PORT;

server {
    listen       80;
    server_name  localhost;

    location / {
      root   /usr/local/openresty/nginx/html;
      index  index.html index.htm;
    }
    location /ping {
      content_by_lua '
        ngx.say("pong") 
        return ngx.exit(ngx.HTTP_OK)
      ';
    } 

    location /webhook {
      content_by_lua '
        --local cjson = require "cjson"
        local get, post, files = require "resty.reqargs"()
        ngx.status  = ngx.HTTP_OK
        ngx.say(cjson.encode(post))

        socket = require "socket"
        np = require "9p"
        
        local tcp = socket:tcp()
        local conn, err = tcp:connect(os.getenv("NINEP_HOST"), os.getenv("NINEP_PORT"), "*", 0)
        conn = np.attach(tcp, "1917", "")

        local f,g = conn:newfid(), conn:newfid()
        np.walk(conn, conn.rootfid, f, "../webhook_queue")
        conn:clone(f, g)
        conn:create(g, uuid(), 420, 1)

        local buf = data.new(cjson.encode(post))

        local n = conn:write(g, 0, buf)
        if n ~= #buf then
          ngx.log(ngx.ERR, "write: expected to write " .. #buf .. " bytes but wrote " .. n)
        end

        conn:clunk(g)

        return ngx.exit(ngx.HTTP_OK)
      ';
    }
  
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
      root   /usr/local/openresty/nginx/html;
    }

}
